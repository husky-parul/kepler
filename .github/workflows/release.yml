name: Release
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      tag:
        description: "Tag name, e.g. v0.4"
        default: v0.4
        required: true
      release:
        description: "Release name, e.g. release-0.4"
        default: release-0.4
        required: true


jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ github.event.inputs.tag }}',
              sha: context.sha
            })
      

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: ${{ github.event.inputs.release }}
          draft: false
          prerelease: false

      - name: Install go and fmt
        run: | 
          sudo apt-get install -y golang-1.18-go
          go version
          which go
          go help

          sudo apt-get install -y make
          sudo apt-get install -y gcc

          sudo echo deb http://cloudfront.debian.net/debian sid main >> sudo /etc/apt/sources.list
          sudo apt-get install -y bpfcc-tools libbpfcc libbpfcc-dev linux-headers-$(uname -r)
          
         
          GOARCH=amd64
          GOOS=linux
          CROSS_BUILD_BINDIR=_output/bin
          make _build_local GOOS=${GOOS} GOARCH=${GOARCH}

          ls -la _output/bin/linux_amd64
          cp ./${CROSS_BUILD_BINDIR}/${GOOS}_${GOARCH}/kepler ./_output/kepler



      - name: Install RPM build dependencies
        run: sudo apt-get install -y rpm

      - name: Create RPM directory structure
        run: |
           mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
           echo '%_topdir %(echo $HOME)/rpmbuild' > ~/.rpmmacros

      - name: Create RPM spec for the release
        id: build_spec_file
        run: |
         
          cp -R  packaging/rpm/kepler.spec packaging/rpm/kepler_build.spec

          echo "%global _VERSION_ ${{ github.event.inputs.tag }}" | cat - packaging/rpm/kepler_build.spec > temp && mv temp packaging/rpm/kepler_build.spec
          echo "%global _RELEASE_ ${{ github.event.inputs.release }}" | cat - packaging/rpm/kepler_build.spec > temp && mv temp packaging/rpm/kepler_build.spec

          ls -la packaging/rpm/kepler_build.spec
          cp -R packaging/rpm/kepler_build.spec $HOME/rpmbuild/SPECS
          ls -la $HOME/rpmbuild/SPECS

      

       

      - name: Build RPM package
        run: |
          rpmbuild -ba $HOME/rpmbuild/SPECS/kepler_build.spec
          ls -la $HOME/rpmbuild/RPMS
  
      
      - name: Upload RPM artifact
        uses: actions/upload-artifact@v2
        with:
          name: kepler-${{ github.event.inputs.tag }}-${{ github.event.inputs.release }}-x86_64.rpm
          path: $HOME/rpmbuild/RPMS/x86_64/kepler-${{ github.event.inputs.tag }}-${{ github.event.inputs.release }}-x86_64.rpm
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}

  
  # create-release-branch:
  #   name: Create release branch
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps: 
  #   - name: Create release branch
  #     uses: peterjgrainger/action-create-branch@v2.2.0
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       branch: ${{ github.event.inputs.release }}
  #       sha: '${{ github.event.pull_request.head.sha }}'
      
  
  # push-image:
  #   name: Push image to the registry
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #   - name: Login to Quay
  #     uses: docker/login-action@v1
  #     with:
  #       registry: quay.io/sustainable_computing_io
  #       username: ${{ secrets.BOT_NAME }}
  #       password: ${{ secrets.BOT_TOKEN }}
  #   - name: make container
  #     run: make
  #   - name: push to quay
  #     run: |
  #       podman tag quay.io/sustainable_computing_io/kepler:latest quay.io/sustainable_computing_io/kepler:${{ github.event.inputs.release }}
  #       podman push quay.io/sustainable_computing_io/kepler:${{ github.event.inputs.release }}
